# Generated by Django 3.1.13 on 2021-10-13 22:37

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.ipam.fields
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("ipam", "0004_fixup_p2p_broadcast"),
        ("extras", "0013_default_fallback_value_computedfield"),
    ]

    operations = [
        migrations.CreateModel(
            name="IPRange",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("start_address", nautobot.ipam.fields.VarbinaryIPField()),
                ("end_address", nautobot.ipam.fields.VarbinaryIPField()),
                ("description", models.CharField(blank=True, max_length=200)),
                ("size", models.PositiveIntegerField(editable=False)),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        through="extras.TaggedItem", to="extras.Tag"
                    ),
                ),
                (
                    "vrf",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipam.vrf",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "IP Ranges",
                "ordering": ["start_address"],
            },
        ),
        migrations.AddConstraint(
            model_name="iprange",
            constraint=models.UniqueConstraint(
                fields=("start_address", "end_address", "vrf"), name="unique_with_vrf"
            ),
        ),
        migrations.AddConstraint(
            model_name="iprange",
            constraint=models.UniqueConstraint(
                condition=models.Q(vrf=None),
                fields=("start_address", "end_address"),
                name="unique_without_vrf",
            ),
        ),
    ]
